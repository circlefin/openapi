{
  "openapi": "3.0.2",
  "servers": [
    {
      "url": "api-sandbox.circle.com"
    }
  ],
  "info": {
    "version": "1.0.2",
    "title": "Core Functionality",
    "description": "APIs for managing your account balance. These endpoints are available with all Circle APIs."
  },
  "tags": [
    {
      "name": "Balances"
    },
    {
      "name": "Payouts"
    },
    {
      "name": "Wires"
    },
    {
      "name": "Signet"
    },
    {
      "name": "SEN"
    },
    {
      "name": "Transfers"
    },
    {
      "name": "Addresses"
    },
    {
      "name": "Deposits"
    }
  ],
  "paths": {
    "/v1/businessAccount/balances": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all balances",
        "description": "Retrieves the balance of funds that are available for use.",
        "operationId": "getBusinessAccountBalances",
        "tags": [
          "Balances"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved balances.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountBalancesResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Balances"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "available": [
                          {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        ],
                        "unsettled": [
                          {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/payouts": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/destination"
          },
          {
            "name": "type",
            "description": "Destination bank account type. Filters the results to fetch all payouts made to a specified destination bank account type. This query parameter can be passed multiple times to fetch results matching multiple destination bank account types.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "wire"
              ]
            }
          },
          {
            "name": "status",
            "description": "Queries items with the specified status. Matches any status if unspecified.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PayoutStatus"
              }
            }
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all payouts",
        "operationId": "getBusinessAccountPayouts",
        "tags": [
          "Payouts"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of payouts.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountPayoutsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PayoutBusinessAccount"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "sourceWalletId": "53535335",
                          "destination": {
                            "type": "wire",
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "name": "COMMERZBANK AG ****3000"
                          },
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "status": "pending",
                          "trackingRef": "CIR-6ESOQANEP3NAO",
                          "errorCode": "insufficient_funds",
                          "riskEvaluation": {
                            "decision": "approved",
                            "reason": "3000"
                          },
                          "adjustments": {
                            "fxCredit": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "fxDebit": {
                              "amount": "3.14",
                              "currency": "USD"
                            }
                          },
                          "return": {
                            "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                            "payoutId": "abdb500d-4a59-457c-801f-2d418c8703ac",
                            "amount": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "fees": {
                              "amount": "3.14",
                              "currency": "USD"
                            },
                            "reason": "payout_returned",
                            "status": "pending",
                            "createDate": "2020-04-10T02:13:30.000Z",
                            "updateDate": "2020-04-10T02:13:30.000Z"
                          },
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a payout",
        "operationId": "createBusinessAccountPayout",
        "tags": [
          "Payouts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessAccountPayoutCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a payout.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBusinessAccountPayoutResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PayoutBusinessAccount"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "sourceWalletId": "53535335",
                        "destination": {
                          "type": "wire",
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "name": "COMMERZBANK AG ****3000"
                        },
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "fees": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "status": "pending",
                        "trackingRef": "CIR-6ESOQANEP3NAO",
                        "errorCode": "insufficient_funds",
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "adjustments": {
                          "fxCredit": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fxDebit": {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        },
                        "return": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "payoutId": "abdb500d-4a59-457c-801f-2d418c8703ac",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "reason": "payout_returned",
                          "status": "pending",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/payouts/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a payout",
        "operationId": "getBusinessAccountPayout",
        "tags": [
          "Payouts"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a payout.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountPayoutResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PayoutBusinessAccount"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "sourceWalletId": "53535335",
                        "destination": {
                          "type": "wire",
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "name": "COMMERZBANK AG ****3000"
                        },
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "fees": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "status": "pending",
                        "trackingRef": "CIR-6ESOQANEP3NAO",
                        "errorCode": "insufficient_funds",
                        "riskEvaluation": {
                          "decision": "approved",
                          "reason": "3000"
                        },
                        "adjustments": {
                          "fxCredit": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fxDebit": {
                            "amount": "3.14",
                            "currency": "USD"
                          }
                        },
                        "return": {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "payoutId": "abdb500d-4a59-457c-801f-2d418c8703ac",
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fees": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "reason": "payout_returned",
                          "status": "pending",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/banks/wires": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a Wire bank account",
        "operationId": "createBusinessAccountWireBankAccount",
        "tags": [
          "Wires"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WireCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a bank account for wire transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBusinessAccountWireBankAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Wire"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "description": "WELLS FARGO BANK, NA ****0010",
                        "trackingRef": "CIR13FB13A",
                        "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                        "billingDetails": {
                          "name": "Satoshi Nakamoto",
                          "city": "Boston",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "MA",
                          "postalCode": "01234"
                        },
                        "bankAddress": {
                          "bankName": "SAN FRANCISCO",
                          "city": "SAN FRANCISCO",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "CA"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all Wire bank accounts",
        "operationId": "getBusinessAccountWireBankAccounts",
        "tags": [
          "Wires"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of bank accounts.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountWireBankAccountsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Wire"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "status": "pending",
                          "description": "WELLS FARGO BANK, NA ****0010",
                          "trackingRef": "CIR13FB13A",
                          "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                          "billingDetails": {
                            "name": "Satoshi Nakamoto",
                            "city": "Boston",
                            "country": "US",
                            "line1": "100 Money Street",
                            "line2": "Suite 1",
                            "district": "MA",
                            "postalCode": "01234"
                          },
                          "bankAddress": {
                            "bankName": "SAN FRANCISCO",
                            "city": "SAN FRANCISCO",
                            "country": "US",
                            "line1": "100 Money Street",
                            "line2": "Suite 1",
                            "district": "CA"
                          },
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/banks/wires/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a Wire bank account",
        "operationId": "getBusinessAccountWireBankAccount",
        "tags": [
          "Wires"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a bank account for wire transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountWireBankAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Wire"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "description": "WELLS FARGO BANK, NA ****0010",
                        "trackingRef": "CIR13FB13A",
                        "fingerprint": "eb170539-9e1c-4e92-bf4f-1d09534fdca2",
                        "billingDetails": {
                          "name": "Satoshi Nakamoto",
                          "city": "Boston",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "MA",
                          "postalCode": "01234"
                        },
                        "bankAddress": {
                          "bankName": "SAN FRANCISCO",
                          "city": "SAN FRANCISCO",
                          "country": "US",
                          "line1": "100 Money Street",
                          "line2": "Suite 1",
                          "district": "CA"
                        },
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/banks/wires/{id}/instructions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          },
          {
            "$ref": "#/components/parameters/Currency"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Wire instructions",
        "description": "Get the wire transfer instructions into the Circle bank account given your bank account id.",
        "operationId": "getBusinessAccountWireInstructionsBankAccount",
        "tags": [
          "Wires"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved wire transfer instructions for the bank account.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountWireInstructionsBankAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/WireInstruction"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "trackingRef": "CIR13FB13A",
                        "beneficiary": {
                          "name": "CIRCLE INTERNET FINANCIAL INC",
                          "address1": "99 HIGH STREET",
                          "address2": "BOSTON MA 02110"
                        },
                        "beneficiaryBank": {
                          "name": "SILVERGATE BANK",
                          "swiftCode": "SIVGUS66XXX",
                          "routingNumber": "322286803",
                          "accountNumber": "****7427",
                          "currency": "USD",
                          "address": "4250 EXECUTIVE SQUARE SUITE 300",
                          "city": "LA JOLLA",
                          "postalCode": "02110",
                          "country": "US"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/banks/signet": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a Signet bank account (Production Only)",
        "operationId": "createBusinessAccountSignetBankAccount",
        "tags": [
          "Signet"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignetFiatAccountCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a bank account for Signet transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBusinessAccountSignetBankAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SignetFiatAccountResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "trackingRef": "CIR13FB14A",
                        "walletAddress": "0xcac04f0069e4ac9314ac4e608e99278a3bebabcd",
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all Signet bank accounts (Production Only).",
        "operationId": "getBusinessAccountSignetBankAccounts",
        "tags": [
          "Signet"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all bank accounts for Signet transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountSignetBankAccountsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SignetFiatAccountResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "status": "pending",
                          "trackingRef": "CIR13FB14A",
                          "walletAddress": "0xcac04f0069e4ac9314ac4e608e99278a3bebabcd",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/banks/signet/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a Signet bank account (Production Only)",
        "operationId": "getBusinessAccountSignetBankAccount",
        "tags": [
          "Signet"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a bank account for Signet transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountSignetBankAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SignetFiatAccountResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "trackingRef": "CIR13FB14A",
                        "walletAddress": "0xcac04f0069e4ac9314ac4e608e99278a3bebabcd",
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/banks/signet/{id}/instructions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Signet instructions (Production Only)",
        "description": "Get the Signet transfer instructions into the Circle bank account given your bank account id (only available on Production now).",
        "operationId": "getBusinessAccountSignetInstructionsBankAccount",
        "tags": [
          "Signet"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Signet transfer instructions for the bank account.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountSignetInstructionsBankAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SignetInstruction"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "trackingRef": "CIR13FB14A",
                        "walletAddress": "0x7e4f4fe03243ac7b291ebaee90b2bb27025a1234"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/banks/sen": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a Silvergate SEN bank account (BETA)",
        "operationId": "createBusinessAccountSenBankAccount",
        "tags": [
          "SEN"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SenFiatAccountCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a bank account for Silvergate SEN transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBusinessAccountSenBankAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SenFiatAccountResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "description": "SILVERGATE BANK ****1111",
                        "trackingRef": "CIR13FB14A",
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z",
                        "currency": "USD"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all Silvergate SEN bank accounts (BETA).",
        "operationId": "getBusinessAccountSenBankAccounts",
        "tags": [
          "SEN"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all bank accounts for Silvergate SEN transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountSenBankAccountsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SenFiatAccountResponse"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "status": "pending",
                          "description": "SILVERGATE BANK ****1111",
                          "trackingRef": "CIR13FB14A",
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z",
                          "currency": "USD"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/banks/sen/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a Silvergate SEN bank account (BETA)",
        "operationId": "getBusinessAccountSenBankAccount",
        "tags": [
          "SEN"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a bank account for Silvergate SEN transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountSenBankAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SenFiatAccountResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "status": "pending",
                        "description": "SILVERGATE BANK ****1111",
                        "trackingRef": "CIR13FB14A",
                        "createDate": "2020-04-10T02:13:30.000Z",
                        "updateDate": "2020-04-10T02:13:30.000Z",
                        "currency": "USD"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/banks/sen/{id}/instructions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Silvergate SEN instructions (BETA)",
        "description": "Get the Silvergate SEN transfer instructions into the Circle bank account given your bank account id (BETA).",
        "operationId": "getBusinessAccountSenInstructionsBankAccount",
        "tags": [
          "SEN"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Sen transfer instructions for the bank account.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountSenInstructionsBankAccountResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/SenInstruction"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "trackingRef": "CIR13FB14A",
                        "accountNumber": "11111111",
                        "currency": "USD"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/businessAccount/transfers": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a transfer",
        "description": "A transfer can be made from an existing business account to a blockchain location.",
        "operationId": "createBusinessAccountTransfer",
        "tags": [
          "Transfers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessAccountTransferCreationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "description": "Successfully created a transfer.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBusinessAccountTransferResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Transfer"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "source": {
                          "type": "wallet",
                          "id": "12345",
                          "identities": [
                            {
                              "type": "individual",
                              "name": "Satoshi Nakamoto",
                              "addresses": [
                                {
                                  "line1": "100 Money Street",
                                  "line2": "Suite 1",
                                  "city": "Boston",
                                  "district": "MA",
                                  "postalCode": "01234",
                                  "country": "US"
                                }
                              ]
                            }
                          ]
                        },
                        "destination": {
                          "type": "blockchain",
                          "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                          "addressTag": "123456789",
                          "chain": "ALGO"
                        },
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "fees": [
                          {
                            "amount": "10.00",
                            "currency": "USD",
                            "type": "network"
                          }
                        ],
                        "transactionHash": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63",
                        "status": "pending",
                        "errorCode": "transfer_failed",
                        "createDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all transfers",
        "description": "Searches for transfers from your business account. If the date parameters are omitted, returns the most recent transfers. This endpoint returns up to 50 transfers in descending chronological order or pageSize, if provided.",
        "operationId": "searchBusinessAccountTransfers",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of transfers.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "SearchBusinessAccountTransfersResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Transfer"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "source": {
                            "type": "wallet",
                            "id": "12345",
                            "identities": [
                              {
                                "type": "individual",
                                "name": "Satoshi Nakamoto",
                                "addresses": [
                                  {
                                    "line1": "100 Money Street",
                                    "line2": "Suite 1",
                                    "city": "Boston",
                                    "district": "MA",
                                    "postalCode": "01234",
                                    "country": "US"
                                  }
                                ]
                              }
                            ]
                          },
                          "destination": {
                            "type": "blockchain",
                            "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                            "addressTag": "123456789",
                            "chain": "ALGO"
                          },
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fees": [
                            {
                              "amount": "10.00",
                              "currency": "USD",
                              "type": "network"
                            }
                          ],
                          "transactionHash": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63",
                          "status": "pending",
                          "errorCode": "transfer_failed",
                          "createDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/transfers/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/IdPath"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a transfer",
        "operationId": "getBusinessAccountTransfer",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "description": "Successfully retrieved a transfer.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountTransferResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Transfer"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "source": {
                          "type": "wallet",
                          "id": "12345",
                          "identities": [
                            {
                              "type": "individual",
                              "name": "Satoshi Nakamoto",
                              "addresses": [
                                {
                                  "line1": "100 Money Street",
                                  "line2": "Suite 1",
                                  "city": "Boston",
                                  "district": "MA",
                                  "postalCode": "01234",
                                  "country": "US"
                                }
                              ]
                            }
                          ]
                        },
                        "destination": {
                          "type": "blockchain",
                          "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                          "addressTag": "123456789",
                          "chain": "ALGO"
                        },
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "fees": [
                          {
                            "amount": "10.00",
                            "currency": "USD",
                            "type": "network"
                          }
                        ],
                        "transactionHash": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63",
                        "status": "pending",
                        "errorCode": "transfer_failed",
                        "createDate": "2020-04-10T02:13:30.000Z"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/businessAccount/wallets/addresses/deposit": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a deposit address",
        "description": "Generates a new blockchain address for a wallet for a given currency/chain pair. Circle may reuse addresses on blockchains that support reuse. For example, if you're requesting two addresses for depositing USD and ETH, both on Ethereum, you may see the same Ethereum address returned. Depositing cryptocurrency to a generated address will credit the associated wallet with the value of the deposit.\n",
        "operationId": "generateBusinessAccountDepositAddress",
        "tags": [
          "Addresses"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessAccountGenerateAddressRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully generated a new deposit address.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GenerateBusinessAccountDepositAddressResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AddressObject"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                        "addressTag": "123456789",
                        "currency": "USD",
                        "chain": "ALGO"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all deposit addresses",
        "operationId": "getBusinessAccountDepositAddresses",
        "tags": [
          "Addresses"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of deposit addresses.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountDepositAddressesResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AddressObject"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                          "addressTag": "123456789",
                          "currency": "USD",
                          "chain": "ALGO"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/wallets/addresses/recipient": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a recipient address",
        "description": "Stores an external blockchain address. Once added, the recipient address must be verified to ensure that you know and trust each new address.\n",
        "operationId": "createBusinessAccountRecipientAddress",
        "tags": [
          "Addresses"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BusinessAccountRecipientAddressCreationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully added a recipient address.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateBusinessAccountRecipientAddressResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/BusinessAccountRecipientAddressObject"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                        "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                        "addressTag": "123456789",
                        "chain": "ALGO",
                        "currency": "USD",
                        "description": "My USDC address at a cryptocurrency exchange"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all recipient addresses",
        "description": "Returns a list of recipient addresses that have each been verified and are eligible for transfers. Any recipient addresses pending verification are not included in the response.\n",
        "operationId": "getBusinessAccountRecipientAddresses",
        "tags": [
          "Addresses"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of recipient addresses.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetBusinessAccountRecipientAddressesResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BusinessAccountRecipientAddressObject"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "address": "0x8381470ED67C3802402dbbFa0058E8871F017A6F",
                          "addressTag": "123456789",
                          "chain": "ALGO",
                          "currency": "USD",
                          "description": "My USDC address at a cryptocurrency exchange"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/businessAccount/deposits": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "description": "Unique identifier for the deposit type. Filters results to fetch deposits made by this specific type.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "wire"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          },
          {
            "$ref": "#/components/parameters/PageBefore"
          },
          {
            "$ref": "#/components/parameters/PageAfter"
          },
          {
            "$ref": "#/components/parameters/PageSize"
          }
        ],
        "summary": "List all deposits",
        "description": "Searches for deposits sent to your business account. If the date parameters are omitted, returns the most recent deposits. This endpoint returns up to 50 deposits in descending chronological order or pageSize, if provided.",
        "operationId": "searchBusinessAccountDeposits",
        "tags": [
          "Deposits"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of deposits.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "SearchBusinessAccountDepositsResponse",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/BusinessAccountDeposit"
                      }
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": [
                        {
                          "id": "b8627ae8-732b-4d25-b947-1df8f4007a29",
                          "sourceWalletId": "9b57048d-2365-4ff5-956b-0199170d1035",
                          "destination": {
                            "type": "wallet",
                            "id": "12345"
                          },
                          "amount": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "fee": {
                            "amount": "3.14",
                            "currency": "USD"
                          },
                          "status": "pending",
                          "riskEvaluation": {
                            "decision": "approved",
                            "reason": "3000"
                          },
                          "createDate": "2020-04-10T02:13:30.000Z",
                          "updateDate": "2020-04-10T02:13:30.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    },
    "/v1/mocks/payments/sen": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a mock Silvergate SEN payment",
        "description": "In the sandbox environment, initiate a mock SEN transfer that mimics the behavior of funds sent through the Silvergate SEN account linked to master wallet.",
        "operationId": "createMockSenPayment",
        "tags": [
          "Deposits"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MockSenPaymentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a mock SEN transfer.",
            "headers": {
              "X-Request-Id": {
                "$ref": "#/components/headers/XRequestId"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "CreateSenPaymentResponse",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MockSenPaymentResponse"
                    }
                  }
                },
                "examples": {
                  "response": {
                    "value": {
                      "data": {
                        "trackingRef": "CIR13FB13A",
                        "amount": {
                          "amount": "3.14",
                          "currency": "USD"
                        },
                        "beneficiaryBank": {
                          "accountNumber": "11111111"
                        },
                        "status": "pending"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/NotAuthorized"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "headers": {
      "XRequestId": {
        "description": "Universally unique identifier (UUID v4) for the request. Helpful for identifying a request when communicating with Circle support.",
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "2adba88e-9d63-44bc-b975-9b6ae3440dde"
        }
      }
    },
    "schemas": {
      "Money": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Magnitude of the amount, in units of the currency, with a `.`.",
            "example": "3.14"
          },
          "currency": {
            "type": "string",
            "description": "Currency code for the amount.",
            "enum": [
              "USD",
              "EUR",
              "BTC",
              "ETH"
            ]
          }
        }
      },
      "Balances": {
        "type": "object",
        "description": "Available and unsettled balances of the merchant.",
        "required": [
          "available",
          "unsettled"
        ],
        "properties": {
          "available": {
            "type": "array",
            "description": "List of currency balances (one for each currency) that are currently available to spend.",
            "items": {
              "$ref": "#/components/schemas/Money"
            }
          },
          "unsettled": {
            "type": "array",
            "description": "List of currency balances (one for each currency) that have been captured but are currently in the process of settling and will become available to spend at some point in the future.",
            "items": {
              "$ref": "#/components/schemas/Money"
            }
          }
        }
      },
      "PayoutStatus": {
        "type": "string",
        "description": "Status of the payout. Status `pending` indicates that the payout is in process; `complete` indicates it finished successfully; `failed` indicates it failed.",
        "enum": [
          "pending",
          "complete",
          "failed"
        ]
      },
      "Id": {
        "type": "string",
        "description": "Unique system generated identifier for the entity.",
        "format": "uuid",
        "example": "b8627ae8-732b-4d25-b947-1df8f4007a29"
      },
      "PayoutDestinationType": {
        "type": "string",
        "description": "The destination bank account type.",
        "enum": [
          "wire",
          "ach",
          "sepa"
        ]
      },
      "BankDestination": {
        "type": "object",
        "description": "The destination bank account.",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PayoutDestinationType"
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "name": {
            "type": "string",
            "description": "Bank name plus last four digits of the bank account number or IBAN.",
            "readOnly": true,
            "example": "COMMERZBANK AG ****3000"
          }
        }
      },
      "FiatMoney": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "description": "Magnitude of the amount, in units of the currency, with a `.`.",
            "type": "string",
            "example": "3.14"
          },
          "currency": {
            "description": "Currency code.",
            "type": "string",
            "enum": [
              "USD",
              "EUR"
            ]
          }
        }
      },
      "FiatMoneyUsd": {
        "type": "object",
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "description": "Magnitude of the amount, in units of the currency, with a `.`.",
            "type": "string",
            "example": "3.14"
          },
          "currency": {
            "description": "Currency code.",
            "type": "string",
            "enum": [
              "USD"
            ]
          }
        }
      },
      "PayoutErrorCode": {
        "type": "string",
        "nullable": true,
        "description": "Indicates the failure reason of a payout. Only present for payouts in failed state. Possible values are [`insufficient_funds`, `transaction_denied`, `transaction_failed`, `transaction_returned`, `bank_transaction_error`, `fiat_account_limit_exceeded`, `invalid_bank_account_number`, `invalid_ach_rtn`, `invalid_wire_rtn`, `vendor_inactive`]'",
        "enum": [
          "insufficient_funds",
          "transaction_denied",
          "transaction_failed",
          "transaction_returned",
          "bank_transaction_error",
          "fiat_account_limit_exceeded",
          "invalid_bank_account_number",
          "invalid_ach_rtn",
          "invalid_wire_rtn",
          "vendor_inactive"
        ]
      },
      "RiskEvaluation": {
        "type": "object",
        "description": "Results of risk evaluation. Only present if the payment is denied by Circle's risk service.",
        "nullable": true,
        "properties": {
          "decision": {
            "description": "Enumerated decision of the account.",
            "type": "string",
            "enum": [
              "approved",
              "denied",
              "review"
            ]
          },
          "reason": {
            "description": "Risk reason for the definitive decision outcome.",
            "type": "string",
            "nullable": true,
            "example": "3000"
          }
        }
      },
      "FinalAdjustments": {
        "type": "object",
        "description": "Final adjustment which increases (credits) or decreases (debits) the total returned amount to the source wallet.",
        "nullable": true,
        "properties": {
          "fxCredit": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "fxDebit": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          }
        }
      },
      "IdPayout": {
        "type": "string",
        "description": "Universally unique identifier (UUID v4) of the payout that is associated with the return.",
        "format": "uuid",
        "example": "abdb500d-4a59-457c-801f-2d418c8703ac"
      },
      "UTCTimestamp": {
        "type": "string",
        "description": "ISO-8601 UTC date/time format.",
        "example": "2020-04-10T02:13:30.000Z"
      },
      "UnwithdrawalObject": {
        "type": "object",
        "description": "Return information if the payout is returned by bank. Only present if `errorCode` of payout is `transaction_returned`.",
        "nullable": true,
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "payoutId": {
            "$ref": "#/components/schemas/IdPayout"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "reason": {
            "type": "string",
            "description": "Reason for the return.",
            "example": "payout_returned"
          },
          "status": {
            "type": "string",
            "description": "Status of the return. A `pending` status indicates that the return is in process; `complete` indicates it finished successfully; `failed` indicates it failed.",
            "enum": [
              "pending",
              "complete",
              "failed"
            ]
          },
          "createDate": {
            "$ref": "#/components/schemas/UTCTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UTCTimestamp"
          }
        }
      },
      "PayoutBusinessAccount": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "sourceWalletId": {
            "type": "string",
            "description": "The identifier of the source wallet used to fund a payout.",
            "example": "53535335"
          },
          "destination": {
            "$ref": "#/components/schemas/BankDestination"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoney"
          },
          "fees": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "status": {
            "$ref": "#/components/schemas/PayoutStatus"
          },
          "trackingRef": {
            "description": "A payout tracking reference. Will be present once known.",
            "nullable": true,
            "example": "CIR-6ESOQANEP3NAO"
          },
          "errorCode": {
            "$ref": "#/components/schemas/PayoutErrorCode"
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "adjustments": {
            "$ref": "#/components/schemas/FinalAdjustments"
          },
          "return": {
            "$ref": "#/components/schemas/UnwithdrawalObject"
          },
          "createDate": {
            "$ref": "#/components/schemas/UTCTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UTCTimestamp"
          }
        }
      },
      "IdempotencyKey": {
        "type": "string",
        "description": "Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests.",
        "format": "uuid",
        "example": "ba943ff1-ca16-49b2-ba55-1057e70ca5c7"
      },
      "BusinessAccountDestinationRequest": {
        "type": "object",
        "description": "The destination bank account.",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wire",
              "sen"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/Id"
          }
        }
      },
      "BusinessAccountPayoutCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "destination",
          "amount"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "destination": {
            "$ref": "#/components/schemas/BusinessAccountDestinationRequest"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoney"
          }
        }
      },
      "ExternalFiatAccountStatus": {
        "description": "Status of the account. A `pending` status indicates that the linking is in-progress; `complete` indicates the account was linked successfully; `failed` indicates it failed.",
        "type": "string",
        "enum": [
          "pending",
          "complete",
          "failed"
        ]
      },
      "Fingerprint": {
        "type": "string",
        "description": "A UUID that uniquely identifies the account number. If the same account is used more than once, each card object will have a different id, but the fingerprint will stay the same.",
        "example": "eb170539-9e1c-4e92-bf4f-1d09534fdca2"
      },
      "BillingDetails": {
        "type": "object",
        "required": [
          "name",
          "city",
          "country",
          "line1",
          "postalCode"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Full name of the card or bank account holder.",
            "maxLength": 1024,
            "example": "Satoshi Nakamoto"
          },
          "city": {
            "type": "string",
            "description": "City portion of the address.",
            "maxLength": 1024,
            "example": "Boston"
          },
          "country": {
            "type": "string",
            "description": "Country portion of the address. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "maxLength": 2,
            "example": "US"
          },
          "line1": {
            "type": "string",
            "description": "Line one of the street address.",
            "maxLength": 1024,
            "example": "100 Money Street"
          },
          "line2": {
            "type": "string",
            "description": "Line two of the street address.",
            "maxLength": 1024,
            "example": "Suite 1"
          },
          "district": {
            "description": "State / County / Province / Region portion of the address. If the country is US or Canada, then district is required and should use the two-letter code for the subdivision.",
            "type": "string",
            "maxLength": 16,
            "example": "MA"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal / ZIP code of the address.",
            "maxLength": 16,
            "example": "01234"
          }
        }
      },
      "BankAddress": {
        "type": "object",
        "description": "The address details for the bank, as provided during bank account creation.",
        "required": [
          "country"
        ],
        "properties": {
          "bankName": {
            "type": "string",
            "description": "Name of the bank. This property is required for bank accounts outside of the US that do not support IBAN'",
            "maxLength": 35,
            "example": "SAN FRANCISCO"
          },
          "city": {
            "type": "string",
            "description": "City portion of the address. This property is required for bank accounts outside of the US.",
            "maxLength": 35,
            "example": "SAN FRANCISCO"
          },
          "country": {
            "type": "string",
            "description": "Country portion of the address. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "maxLength": 2,
            "example": "US"
          },
          "line1": {
            "type": "string",
            "description": "Line one of the street address.",
            "maxLength": 35,
            "example": "100 Money Street"
          },
          "line2": {
            "type": "string",
            "description": "Line two of the street address.",
            "maxLength": 35,
            "example": "Suite 1"
          },
          "district": {
            "type": "string",
            "description": "State / County / Province / Region portion of the address. US and Canada use the two-letter code for the subdivision.",
            "maxLength": 16,
            "example": "CA"
          }
        }
      },
      "Wire": {
        "type": "object",
        "required": [
          "id",
          "status",
          "description",
          "trackingRef",
          "fingerprint",
          "billingDetails",
          "createDate",
          "updateDate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFiatAccountStatus"
          },
          "description": {
            "type": "string",
            "description": "Bank name plus last four digits of the bank account number or IBAN.",
            "example": "WELLS FARGO BANK, NA ****0010"
          },
          "trackingRef": {
            "type": "string",
            "description": "Wire tracking ref that needs to be set in the wire reference to beneficiary field.",
            "example": "CIR13FB13A"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "bankAddress": {
            "$ref": "#/components/schemas/BankAddress"
          },
          "createDate": {
            "$ref": "#/components/schemas/UTCTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UTCTimestamp"
          }
        }
      },
      "WireCreationRequestUS": {
        "type": "object",
        "title": "US Bank Account",
        "description": "Relevant fields for U.S. bank accounts.",
        "required": [
          "idempotencyKey",
          "accountNumber",
          "routingNumber",
          "billingDetails",
          "bankAddress"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "accountNumber": {
            "description": "Account number that identifies the bank account.",
            "type": "string",
            "example": "12340010",
            "minLength": 6,
            "maxLength": 35
          },
          "routingNumber": {
            "description": "ABA routing number for the bank account. Note this has to be specific for bank wire transfers.",
            "type": "string",
            "example": "121000248"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "bankAddress": {
            "$ref": "#/components/schemas/BankAddress"
          }
        }
      },
      "BankAddressIbanSupported": {
        "type": "object",
        "description": "The address of the bank. City and country fields are required.",
        "required": [
          "city",
          "country"
        ],
        "properties": {
          "bankName": {
            "type": "string",
            "description": "Name of the bank. This property is required for bank accounts outside of the US that do not support IBAN'",
            "maxLength": 35,
            "example": "SAN FRANCISCO"
          },
          "city": {
            "type": "string",
            "description": "City portion of the address. This property is required for bank accounts outside of the US.",
            "maxLength": 1024,
            "example": "SAN FRANCISCO"
          },
          "country": {
            "type": "string",
            "description": "Country portion of the address. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "maxLength": 2,
            "example": "US"
          },
          "line1": {
            "type": "string",
            "description": "Line one of the street address.",
            "maxLength": 35,
            "example": "100 Money Street"
          },
          "line2": {
            "type": "string",
            "description": "Line two of the street address.",
            "maxLength": 35,
            "example": "Suite 1"
          },
          "district": {
            "type": "string",
            "description": "State / County / Province / Region portion of the address. US and Canada use the two-letter code for the subdivision.",
            "maxLength": 16,
            "example": "CA"
          }
        }
      },
      "WireCreationRequestIban": {
        "type": "object",
        "title": "Non US Bank Account - IBAN Supported",
        "description": "Relevant fields for non-U.S. bank accounts that support IBAN.",
        "required": [
          "idempotencyKey",
          "iban",
          "billingDetails",
          "bankAddress"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "iban": {
            "description": "International Bank Account Number (IBAN) for the bank account.",
            "type": "string",
            "example": "DE31100400480532013000"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "bankAddress": {
            "$ref": "#/components/schemas/BankAddressIbanSupported"
          }
        }
      },
      "BankAddressNonIban": {
        "type": "object",
        "description": "The address of the bank. BankName, City and Country fields are required.",
        "required": [
          "bankName",
          "city",
          "country"
        ],
        "properties": {
          "bankName": {
            "type": "string",
            "description": "Name of the bank. This property is required for bank accounts outside of the US that do not support IBAN'",
            "maxLength": 35,
            "example": "SAN FRANCISCO"
          },
          "city": {
            "type": "string",
            "description": "City portion of the address. This property is required for bank accounts outside of the US.",
            "maxLength": 1024,
            "example": "SAN FRANCISCO"
          },
          "country": {
            "type": "string",
            "description": "Country portion of the address. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "maxLength": 2,
            "example": "US"
          },
          "line1": {
            "type": "string",
            "description": "Line one of the street address.",
            "maxLength": 35,
            "example": "100 Money Street"
          },
          "line2": {
            "type": "string",
            "description": "Line two of the street address.",
            "maxLength": 35,
            "example": "Suite 1"
          },
          "district": {
            "type": "string",
            "description": "State / County / Province / Region portion of the address. US and Canada use the two-letter code for the subdivision.",
            "maxLength": 16,
            "example": "CA"
          }
        }
      },
      "WireCreationRequestAccountNumber": {
        "type": "object",
        "title": "Non US Bank Account - IBAN Not Supported",
        "description": "Relevant fields for non-U.S. banks that do NOT support IBAN.",
        "required": [
          "idempotencyKey",
          "accountNumber",
          "routingNumber",
          "billingDetails",
          "bankAddress"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "accountNumber": {
            "description": "Account number that identifies the bank account.",
            "type": "string",
            "example": "0321800123",
            "minLength": 6,
            "maxLength": 35
          },
          "routingNumber": {
            "description": "The bank's SWIFT / BIC code.",
            "type": "string",
            "example": "SBININBB354"
          },
          "billingDetails": {
            "$ref": "#/components/schemas/BillingDetails"
          },
          "bankAddress": {
            "$ref": "#/components/schemas/BankAddressNonIban"
          }
        }
      },
      "WireCreationRequest": {
        "type": "object",
        "description": "Request object used to create a bank account (wires). Different fields are required depending on the bank country, see the guide documentation for the list of supported bank countries along with which ones support IBAN.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/WireCreationRequestUS"
          },
          {
            "$ref": "#/components/schemas/WireCreationRequestIban"
          },
          {
            "$ref": "#/components/schemas/WireCreationRequestAccountNumber"
          }
        ]
      },
      "WireInstructionBeneficiary": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the beneficiary.",
            "example": "CIRCLE INTERNET FINANCIAL INC"
          },
          "address1": {
            "type": "string",
            "description": "Address line 1 of the beneficiary's address.",
            "example": "99 HIGH STREET"
          },
          "address2": {
            "type": "string",
            "description": "Address line 2 of the beneficiary's address.",
            "example": "BOSTON MA 02110"
          }
        }
      },
      "WireInstructionBeneficiaryBank": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the beneficiary's bank.",
            "example": "SILVERGATE BANK"
          },
          "swiftCode": {
            "type": "string",
            "description": "SWIFT code of the beneficiary's bank account.",
            "example": "SIVGUS66XXX"
          },
          "routingNumber": {
            "type": "string",
            "description": "ABA Routing number of the beneficiary's bank account.",
            "example": "322286803"
          },
          "accountNumber": {
            "type": "string",
            "description": "Account number of the beneficiary's bank account.",
            "example": "****7427"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the beneficiary's bank account.",
            "example": "USD"
          },
          "address": {
            "type": "string",
            "description": "Address of the beneficiary's bank.",
            "example": "4250 EXECUTIVE SQUARE SUITE 300"
          },
          "city": {
            "type": "string",
            "description": "City of the beneficiary's bank.",
            "example": "LA JOLLA"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code of the beneficiary's bank.",
            "example": "02110"
          },
          "country": {
            "type": "string",
            "description": "Country code of the beneficiary's bank. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "example": "US"
          }
        }
      },
      "WireInstruction": {
        "type": "object",
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "Circle tracking reference that needs to be set in the wire reference field.",
            "example": "CIR13FB13A"
          },
          "beneficiary": {
            "$ref": "#/components/schemas/WireInstructionBeneficiary"
          },
          "beneficiaryBank": {
            "$ref": "#/components/schemas/WireInstructionBeneficiaryBank"
          }
        }
      },
      "SignetFiatAccountResponse": {
        "type": "object",
        "required": [
          "id",
          "status",
          "trackingRef",
          "walletAddress",
          "createDate",
          "updateDate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFiatAccountStatus"
          },
          "trackingRef": {
            "type": "string",
            "description": "Tracking ref that needs to be set in the public description field when you send the funds to Circle Signet wallet.",
            "example": "CIR13FB14A"
          },
          "walletAddress": {
            "type": "string",
            "description": "Your signet wallet address.",
            "example": "0xcac04f0069e4ac9314ac4e608e99278a3bebabcd"
          },
          "createDate": {
            "$ref": "#/components/schemas/UTCTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UTCTimestamp"
          }
        }
      },
      "SignetFiatAccountCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "walletAddress"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "walletAddress": {
            "type": "string",
            "description": "Signet wallet address.",
            "example": "0xcac04f0069e4ac9314ac4e608e99278a3bebabcd"
          }
        }
      },
      "SignetInstruction": {
        "type": "object",
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "Circle tracking reference that needs to be set in the signet public description field.",
            "example": "CIR13FB14A"
          },
          "walletAddress": {
            "type": "string",
            "description": "Circle wallet address that needs to be set in the signet recipient wallet field.",
            "example": "0x7e4f4fe03243ac7b291ebaee90b2bb27025a1234"
          }
        }
      },
      "SenFiatAccountResponse": {
        "type": "object",
        "required": [
          "id",
          "status",
          "description",
          "trackingRef",
          "createDate",
          "updateDate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFiatAccountStatus"
          },
          "description": {
            "type": "string",
            "description": "Bank name plus last four digits of the bank account number.",
            "example": "SILVERGATE BANK ****1111"
          },
          "trackingRef": {
            "type": "string",
            "description": "Circle tracking reference that needs to be set in the memo field..",
            "example": "CIR13FB14A"
          },
          "createDate": {
            "$ref": "#/components/schemas/UTCTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UTCTimestamp"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the fiat account.",
            "example": "USD"
          }
        }
      },
      "SenFiatAccountCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "accountNumber"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "accountNumber": {
            "type": "string",
            "description": "Silvergate SEN account number.",
            "example": "12345678"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the Silvergate SEN account.",
            "example": "USD"
          }
        }
      },
      "SenInstruction": {
        "type": "object",
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "Circle tracking reference that needs to be set in the memo field.",
            "example": "CIR13FB14A"
          },
          "accountNumber": {
            "type": "string",
            "description": "Circle corporate Silvergate SEN account number that needs to be set as destination.",
            "example": "11111111"
          },
          "currency": {
            "type": "string",
            "description": "Currency of Circle corporate Silvergate SEN account.",
            "example": "USD"
          }
        }
      },
      "IdentityAddress": {
        "type": "object",
        "required": [
          "line1",
          "city",
          "district",
          "postalCode",
          "country"
        ],
        "properties": {
          "line1": {
            "type": "string",
            "description": "Line one of the street address.",
            "maxLength": 1024,
            "example": "100 Money Street"
          },
          "line2": {
            "type": "string",
            "description": "Line two of the street address.",
            "maxLength": 1024,
            "example": "Suite 1"
          },
          "city": {
            "type": "string",
            "description": "City portion of the address.",
            "maxLength": 1024,
            "example": "Boston"
          },
          "district": {
            "description": "State / County / Province / Region portion of the address. If the country is US or Canada, then district is required and should use the two-letter code for the subdivision.",
            "type": "string",
            "maxLength": 16,
            "example": "MA"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal / ZIP code of the address.",
            "maxLength": 16,
            "example": "01234"
          },
          "country": {
            "type": "string",
            "description": "Country portion of the address. Formatted as a two-letter country code specified in ISO 3166-1 alpha-2.",
            "maxLength": 2,
            "example": "US"
          }
        }
      },
      "Identity": {
        "type": "object",
        "description": "The identity of the originator. Identities are required when:\n  * `destination.type: \"blockchain\"`\n  * `destination.chain: \"ETH\"`\n  * `amount.amount` >= $3,000 in value\n",
        "required": [
          "type",
          "name",
          "addresses"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of identity for the originator.\n* `individual` - A uniquely distinguishable individual.\n* `business` - Any entity other than a natural person that can establish a permanent customer relationship with an affected entity or otherwise own property. This can include companies, foundations, anstalt, partnerships, associations and other relevantly similar entities.\n",
            "enum": [
              "individual",
              "business"
            ]
          },
          "name": {
            "type": "string",
            "description": "Full name of the identity.",
            "example": "Satoshi Nakamoto",
            "maxLength": 1024
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityAddress"
            }
          }
        }
      },
      "TransferSourceWalletLocation": {
        "description": "A source wallet location.",
        "type": "object",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wallet"
            ]
          },
          "id": {
            "type": "string",
            "description": "The id of the wallet.",
            "example": "12345"
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Identity"
            }
          }
        }
      },
      "Chain": {
        "type": "string",
        "description": "A blockchain that a given currency is available on.",
        "enum": [
          "ALGO",
          "AVAX",
          "BTC",
          "ETH",
          "FLOW",
          "HBAR",
          "MATIC",
          "SOL",
          "TRX",
          "XLM"
        ]
      },
      "TransferSourceBlockchainLocation": {
        "description": "A source blockchain address.",
        "type": "object",
        "required": [
          "type",
          "chain"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "blockchain"
            ]
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Identity"
            }
          }
        }
      },
      "TransferSourceLocation": {
        "description": "A source of funds.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TransferSourceWalletLocation"
          },
          {
            "$ref": "#/components/schemas/TransferSourceBlockchainLocation"
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Address": {
        "type": "string",
        "description": "An alphanumeric string representing a blockchain address. Will be in different formats for different chains. It is important to preserve the exact formatting and capitalization of the address.",
        "example": "0x8381470ED67C3802402dbbFa0058E8871F017A6F"
      },
      "AddressTag": {
        "type": "string",
        "description": "The secondary identifier for a blockchain address. An example of this is the memo field on the Stellar network, which can be text, id, or hash format.",
        "nullable": true,
        "example": "123456789"
      },
      "TransferDestinationBlockchainLocation": {
        "description": "A destination blockchain address.",
        "type": "object",
        "required": [
          "type",
          "chain",
          "address"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "blockchain"
            ]
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "addressTag": {
            "$ref": "#/components/schemas/AddressTag"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          }
        }
      },
      "TransferDestinationWalletLocation": {
        "description": "A destination wallet location.",
        "type": "object",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wallet"
            ]
          },
          "id": {
            "type": "string",
            "description": "The id of the wallet.",
            "example": "12345"
          },
          "address": {
            "type": "string",
            "description": "An alphanumeric string which indicates the wallet address used to receive the transfer. Will only be set when the transfer source is a blockchain address.",
            "example": "0x8381470ED67C3802402dbbFa0058E8871F017A6F"
          },
          "addressTag": {
            "$ref": "#/components/schemas/AddressTag"
          }
        }
      },
      "TransferDestinationLocation": {
        "description": "A destination of funds.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TransferDestinationBlockchainLocation"
          },
          {
            "$ref": "#/components/schemas/TransferDestinationWalletLocation"
          }
        ],
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Fee": {
        "type": "object",
        "required": [
          "amount",
          "currency",
          "type"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Magnitude of the fee amount, in units of the currency, with a `.`.",
            "example": "10.00"
          },
          "currency": {
            "type": "string",
            "description": "Currency code for the amount.",
            "enum": [
              "USD"
            ]
          },
          "type": {
            "type": "string",
            "description": "Category of the fee.",
            "enum": [
              "network"
            ]
          }
        }
      },
      "TransferErrorCode": {
        "type": "string",
        "description": "Indicates the failure reason of a transfer. Only present for transfers in a `failed` state. Possible values are `insufficient_funds`, `blockchain_error` and `transfer_denied` and `transfer_failed`",
        "nullable": true,
        "enum": [
          "transfer_failed",
          "transfer_denied",
          "blockchain_error",
          "insufficient_funds"
        ]
      },
      "Transfer": {
        "type": "object",
        "description": "A transfer of funds.",
        "required": [
          "id",
          "source",
          "destination",
          "amount",
          "status"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "source": {
            "$ref": "#/components/schemas/TransferSourceLocation"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferDestinationLocation"
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "fees": {
            "description": "An array of fees applied to a transaction. This is only available when there is at least one non-zero fee.",
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fee"
            }
          },
          "transactionHash": {
            "description": "A hash that uniquely identifies the onchain transaction. This is only available where either source or destination are of type blockchain.",
            "type": "string",
            "example": "0x4cebf8f90c9243a23c77e4ae20df691469e4b933b295a73376292843968f7a63"
          },
          "status": {
            "description": "Status of the transfer. Status `pending` indicates that the transfer is in the process of running; `complete` indicates it finished successfully; `failed` indicates it failed.",
            "type": "string",
            "enum": [
              "pending",
              "complete",
              "failed"
            ]
          },
          "errorCode": {
            "$ref": "#/components/schemas/TransferErrorCode"
          },
          "createDate": {
            "description": "The create date of the transfer.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TransferRequestVerifiedBlockchainLocation": {
        "type": "object",
        "required": [
          "type",
          "addressId"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "verified_blockchain"
            ]
          },
          "addressId": {
            "type": "string",
            "description": "The ID of the verified blockchain recipient address.",
            "example": "f1f36b85-cafe-484e-a46b-02340bfdb927",
            "format": "uuid"
          }
        }
      },
      "BusinessAccountTransferCreationRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "destination",
          "amount"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferRequestVerifiedBlockchainLocation"
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          }
        }
      },
      "Currency": {
        "type": "string",
        "description": "A currency associated with a balance or address.",
        "nullable": true,
        "enum": [
          "USD",
          "EUR",
          "BTC",
          "ETH"
        ]
      },
      "AddressObject": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "addressTag": {
            "$ref": "#/components/schemas/AddressTag"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          }
        }
      },
      "BusinessAccountGenerateAddressRequest": {
        "type": "object",
        "required": [
          "idempotencyKey",
          "currency",
          "chain"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          }
        }
      },
      "BusinessAccountDescription": {
        "type": "string",
        "description": "An identifier or sentence that describes the recipient.",
        "example": "My USDC address at a cryptocurrency exchange"
      },
      "BusinessAccountRecipientAddressObject": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "addressTag": {
            "$ref": "#/components/schemas/AddressTag"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "description": {
            "$ref": "#/components/schemas/BusinessAccountDescription"
          }
        }
      },
      "BusinessAccountRecipientAddressCreationRequest": {
        "type": "object",
        "description": "Adds a recipient address. The currency parameter will default to USD for all chains except for BTC where it defaults to BTC.",
        "required": [
          "idempotencyKey",
          "address",
          "chain",
          "description"
        ],
        "properties": {
          "idempotencyKey": {
            "$ref": "#/components/schemas/IdempotencyKey"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "addressTag": {
            "$ref": "#/components/schemas/AddressTag"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "description": {
            "$ref": "#/components/schemas/BusinessAccountDescription"
          }
        }
      },
      "WalletLocation": {
        "type": "object",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wallet"
            ]
          },
          "id": {
            "type": "string",
            "description": "The id of the wallet.",
            "example": "12345"
          }
        }
      },
      "BusinessAccountDeposit": {
        "type": "object",
        "description": "A deposit",
        "required": [
          "id",
          "destination",
          "amount",
          "status",
          "createDate"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "sourceWalletId": {
            "type": "string",
            "description": "The identifier for the bank account where the funds were deposited from.",
            "format": "uuid",
            "example": "9b57048d-2365-4ff5-956b-0199170d1035"
          },
          "destination": {
            "$ref": "#/components/schemas/WalletLocation"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoney"
          },
          "fee": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "status": {
            "type": "string",
            "description": "Status of the deposit. Status `pending` indicates that the deposit is in the process of running; `complete` indicates it finished successfully; `failed` indicates it failed.",
            "enum": [
              "pending",
              "complete",
              "failed"
            ]
          },
          "riskEvaluation": {
            "$ref": "#/components/schemas/RiskEvaluation"
          },
          "createDate": {
            "$ref": "#/components/schemas/UTCTimestamp"
          },
          "updateDate": {
            "$ref": "#/components/schemas/UTCTimestamp"
          }
        }
      },
      "MockSenPaymentBeneficiaryBankInstruction": {
        "type": "object",
        "required": [
          "accountNumber"
        ],
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "Circle corporate Silvergate SEN account number that needs to be set as destination.",
            "example": "11111111"
          }
        }
      },
      "MockSenPaymentRequest": {
        "type": "object",
        "required": [
          "trackingRef",
          "amount",
          "beneficiaryBank"
        ],
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "Circle tracking reference that needs to be set in the memo filed. This field is retrievable through the response during SEN account creation or via the bank instruction endpoint.",
            "example": "CIR13FB13A"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoney"
          },
          "beneficiaryBank": {
            "$ref": "#/components/schemas/MockSenPaymentBeneficiaryBankInstruction"
          }
        }
      },
      "MockSenPaymentResponse": {
        "type": "object",
        "properties": {
          "trackingRef": {
            "type": "string",
            "description": "Wire tracking reference that needs to be set in the wire reference to beneficiary field. This field is retrievable through the response during wire creation or via the bank instruction endpoint.",
            "example": "CIR13FB13A"
          },
          "amount": {
            "$ref": "#/components/schemas/FiatMoneyUsd"
          },
          "beneficiaryBank": {
            "$ref": "#/components/schemas/MockSenPaymentBeneficiaryBankInstruction"
          },
          "status": {
            "type": "string",
            "description": "Enumerated status of the wire payment. Status `pending` indicates that the wire payment is in process; `processed` indicates it finished successfully; `failed` indicates it failed.",
            "enum": [
              "pending",
              "processed",
              "failed"
            ]
          }
        }
      }
    },
    "responses": {
      "NotAuthorized": {
        "description": "The request has not been applied because it lacks valid authentication credentials.",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/XRequestId"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "NotAuthorized",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong."
                }
              },
              "example": {
                "code": 401,
                "message": "Malformed authorization."
              }
            },
            "examples": {
              "response": {
                "value": {
                  "code": 401,
                  "message": "Malformed authorization."
                }
              }
            }
          }
        }
      },
      "BadRequest": {
        "description": "The request cannot be processed due to a client error.",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/XRequestId"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "BadRequest",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong."
                }
              },
              "example": {
                "code": 400,
                "message": "Bad request."
              }
            },
            "examples": {
              "response": {
                "value": {
                  "code": 400,
                  "message": "Bad request."
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "The specified resource was not found.",
        "headers": {
          "X-Request-Id": {
            "$ref": "#/components/headers/XRequestId"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "NotFound",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong."
                }
              },
              "example": {
                "code": 404,
                "message": "Not found."
              }
            },
            "examples": {
              "response": {
                "value": {
                  "code": 404,
                  "message": "Not found."
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "destination": {
        "name": "destination",
        "description": "Universally unique identifier (UUID v4) for the destination bank account. Filters the results to fetch all payouts made to a destination bank account.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "e3d0a838-d732-49d0-bf44-73a668e38973"
        }
      },
      "From": {
        "name": "from",
        "description": "Queries items created since the specified date-time (inclusive).",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2020-04-10T02:13:30.000Z"
        }
      },
      "To": {
        "name": "to",
        "description": "Queries items created before the specified date-time (inclusive).",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2020-04-10T02:13:30.000Z"
        }
      },
      "PageBefore": {
        "name": "pageBefore",
        "description": "A collection ID value used for pagination.\n\nIt marks the exclusive end of a page. When provided, the collection resource will return the next `n` items before\nthe id, with `n` being specified by `pageSize`.\n\nThe items will be returned in the natural order of the collection.\n\nThe resource will return the first page if neither `pageAfter` nor `pageBefore` are specified.\n\nSHOULD NOT be used in conjuction with pageAfter.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "PageAfter": {
        "name": "pageAfter",
        "description": "A collection ID value used for pagination.\n\nIt marks the exclusive begin of a page. When provided, the collection resource will return the next `n` items after\nthe id, with `n` being specified by `pageSize`.\n\nThe items will be returned in the natural order of the collection.\n\nThe resource will return the first page if neither `pageAfter` nor `pageBefore` are specified.\n\nSHOULD NOT be used in conjuction with pageBefore.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "PageSize": {
        "name": "pageSize",
        "description": "Limits the number of items to be returned.\n\nSome collections have a strict upper bound that will disregard this value. In case the specified value is higher\nthan the allowed limit, the collection limit will be used.\n\nIf avoided, the collection will determine the page size itself.\n",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "example": 5
        }
      },
      "IdPath": {
        "name": "id",
        "description": "Universally unique identifier (UUID v4) of a resource.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "b3d9d2d5-4c12-4946-a09d-953e82fae2b0"
        }
      },
      "Currency": {
        "name": "currency",
        "description": "Queries beneficiary bank account currency. Default is USD.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "USD",
            "EUR"
          ]
        }
      }
    }
  }
}